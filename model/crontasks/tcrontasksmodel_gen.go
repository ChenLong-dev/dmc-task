// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package crontasks

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tCronTasksFieldNames          = builder.RawFieldNames(&TCronTasks{})
	tCronTasksRows                = strings.Join(tCronTasksFieldNames, ",")
	tCronTasksRowsExpectAutoSet   = strings.Join(stringx.Remove(tCronTasksFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tCronTasksRowsWithPlaceHolder = strings.Join(stringx.Remove(tCronTasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tCronTasksModel interface {
		Insert(ctx context.Context, data *TCronTasks) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*TCronTasks, error)
		Update(ctx context.Context, data *TCronTasks) error
		Delete(ctx context.Context, id string) error
	}

	defaultTCronTasksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TCronTasks struct {
		Id           string       `db:"id"`            // 定时任务ID
		Type         int64        `db:"type"`          // 任务类型
		BizCode      string       `db:"biz_code"`      // 业务Code
		BizId        string       `db:"biz_id"`        // 业务ID
		ExecPath     string       `db:"exec_path"`     // 执行路径
		Param        string       `db:"param"`         // 任务的执行参数
		Timeout      int64        `db:"timeout"`       // 任务超时时间，单位秒
		StartTime    sql.NullTime `db:"start_time"`    // 定时任务执行的实际开始时间
		FinishTime   sql.NullTime `db:"finish_time"`   // 定时任务执行的实际结束时间
		ExecTime     time.Time    `db:"exec_time"`     // 定时任务执行的时间
		ExecInterval int64        `db:"exec_interval"` // 任务执行时间（finish_time-start_time）
		Status       int64        `db:"status"`        // 任务执行状态
		ResultMsg    string       `db:"result_msg"`    // 任务的执行结果描述
		ExtInfo      string       `db:"ext_info"`      // 扩展信息
		UpdateTime   time.Time    `db:"update_time"`   // 任务更新时间
		CreateTime   time.Time    `db:"create_time"`   // 任务创建时间
	}
)

func newTCronTasksModel(conn sqlx.SqlConn) *defaultTCronTasksModel {
	return &defaultTCronTasksModel{
		conn:  conn,
		table: "`t_cron_tasks`",
	}
}

func (m *defaultTCronTasksModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTCronTasksModel) FindOne(ctx context.Context, id string) (*TCronTasks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tCronTasksRows, m.table)
	var resp TCronTasks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTCronTasksModel) Insert(ctx context.Context, data *TCronTasks) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tCronTasksRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Type, data.BizCode, data.BizId, data.ExecPath, data.Param, data.Timeout, data.StartTime, data.FinishTime, data.ExecTime, data.ExecInterval, data.Status, data.ResultMsg, data.ExtInfo)
	return ret, err
}

func (m *defaultTCronTasksModel) Update(ctx context.Context, data *TCronTasks) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tCronTasksRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Type, data.BizCode, data.BizId, data.ExecPath, data.Param, data.Timeout, data.StartTime, data.FinishTime, data.ExecTime, data.ExecInterval, data.Status, data.ResultMsg, data.ExtInfo, data.Id)
	return err
}

func (m *defaultTCronTasksModel) tableName() string {
	return m.table
}
