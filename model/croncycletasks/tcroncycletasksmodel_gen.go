// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package croncycletasks

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tCronCycleTasksFieldNames          = builder.RawFieldNames(&TCronCycleTasks{})
	tCronCycleTasksRows                = strings.Join(tCronCycleTasksFieldNames, ",")
	tCronCycleTasksRowsExpectAutoSet   = strings.Join(stringx.Remove(tCronCycleTasksFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tCronCycleTasksRowsWithPlaceHolder = strings.Join(stringx.Remove(tCronCycleTasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tCronCycleTasksModel interface {
		Insert(ctx context.Context, data *TCronCycleTasks) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*TCronCycleTasks, error)
		Update(ctx context.Context, data *TCronCycleTasks) error
		Delete(ctx context.Context, id string) error
	}

	defaultTCronCycleTasksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TCronCycleTasks struct {
		Id         string    `db:"id"`          // 定时循环任务ID
		EntryId    int64     `db:"entry_id"`    // 入口ID
		Type       int64     `db:"type"`        // 任务类型
		BizCode    string    `db:"biz_code"`    // 业务Code
		Cron       string    `db:"cron"`        // cron参数
		ExecPath   string    `db:"exec_path"`   // 执行路径
		Param      string    `db:"param"`       // 任务的执行参数
		Timeout    int64     `db:"timeout"`     // 任务超时时间，单位秒
		Status     int64     `db:"status"`      // 任务执行状态
		ExtInfo    string    `db:"ext_info"`    // 扩展信息
		UpdateTime time.Time `db:"update_time"` // 任务更新时间
		CreateTime time.Time `db:"create_time"` // 任务创建时间
	}
)

func newTCronCycleTasksModel(conn sqlx.SqlConn) *defaultTCronCycleTasksModel {
	return &defaultTCronCycleTasksModel{
		conn:  conn,
		table: "`t_cron_cycle_tasks`",
	}
}

func (m *defaultTCronCycleTasksModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTCronCycleTasksModel) FindOne(ctx context.Context, id string) (*TCronCycleTasks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tCronCycleTasksRows, m.table)
	var resp TCronCycleTasks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTCronCycleTasksModel) Insert(ctx context.Context, data *TCronCycleTasks) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tCronCycleTasksRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.EntryId, data.Type, data.BizCode, data.Cron, data.ExecPath, data.Param, data.Timeout, data.Status, data.ExtInfo)
	return ret, err
}

func (m *defaultTCronCycleTasksModel) Update(ctx context.Context, data *TCronCycleTasks) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tCronCycleTasksRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.EntryId, data.Type, data.BizCode, data.Cron, data.ExecPath, data.Param, data.Timeout, data.Status, data.ExtInfo, data.Id)
	return err
}

func (m *defaultTCronCycleTasksModel) tableName() string {
	return m.table
}
