// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: task.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Task_AddCronCycleTask_FullMethodName         = "/Task/AddCronCycleTask"
	Task_DelCronCycleTask_FullMethodName         = "/Task/DelCronCycleTask"
	Task_ModCronCycleTask_FullMethodName         = "/Task/ModCronCycleTask"
	Task_StartOrStopCronCycleTask_FullMethodName = "/Task/StartOrStopCronCycleTask"
	Task_QueryCronCycleTask_FullMethodName       = "/Task/QueryCronCycleTask"
	Task_AddFixedTimeSingleTask_FullMethodName   = "/Task/AddFixedTimeSingleTask"
	Task_DelFixedTimeSingleTask_FullMethodName   = "/Task/DelFixedTimeSingleTask"
	Task_QueryFixedTimeSingleTask_FullMethodName = "/Task/QueryFixedTimeSingleTask"
	Task_AddRealTimeSingleTask_FullMethodName    = "/Task/AddRealTimeSingleTask"
	Task_QueryRealTimeSingleTask_FullMethodName  = "/Task/QueryRealTimeSingleTask"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	// 定时循环任务
	AddCronCycleTask(ctx context.Context, in *AddCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error)
	DelCronCycleTask(ctx context.Context, in *DelCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error)
	ModCronCycleTask(ctx context.Context, in *ModCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error)
	StartOrStopCronCycleTask(ctx context.Context, in *StartOrStopCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error)
	QueryCronCycleTask(ctx context.Context, in *QueryCronCycleTaskReq, opts ...grpc.CallOption) (*QueryCronCycleTaskResp, error)
	// 固定时间单任务
	AddFixedTimeSingleTask(ctx context.Context, in *AddFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error)
	DelFixedTimeSingleTask(ctx context.Context, in *DelFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error)
	QueryFixedTimeSingleTask(ctx context.Context, in *QueryFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*QueryFixedTimeSingleTaskResp, error)
	// 实时单任务
	AddRealTimeSingleTask(ctx context.Context, in *AddRealTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error)
	QueryRealTimeSingleTask(ctx context.Context, in *QueryRealTimeSingleTaskReq, opts ...grpc.CallOption) (*QueryRealTimeSingleTaskResp, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) AddCronCycleTask(ctx context.Context, in *AddCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_AddCronCycleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DelCronCycleTask(ctx context.Context, in *DelCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_DelCronCycleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ModCronCycleTask(ctx context.Context, in *ModCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_ModCronCycleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) StartOrStopCronCycleTask(ctx context.Context, in *StartOrStopCronCycleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_StartOrStopCronCycleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryCronCycleTask(ctx context.Context, in *QueryCronCycleTaskReq, opts ...grpc.CallOption) (*QueryCronCycleTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCronCycleTaskResp)
	err := c.cc.Invoke(ctx, Task_QueryCronCycleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AddFixedTimeSingleTask(ctx context.Context, in *AddFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_AddFixedTimeSingleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DelFixedTimeSingleTask(ctx context.Context, in *DelFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_DelFixedTimeSingleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryFixedTimeSingleTask(ctx context.Context, in *QueryFixedTimeSingleTaskReq, opts ...grpc.CallOption) (*QueryFixedTimeSingleTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFixedTimeSingleTaskResp)
	err := c.cc.Invoke(ctx, Task_QueryFixedTimeSingleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AddRealTimeSingleTask(ctx context.Context, in *AddRealTimeSingleTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Task_AddRealTimeSingleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) QueryRealTimeSingleTask(ctx context.Context, in *QueryRealTimeSingleTaskReq, opts ...grpc.CallOption) (*QueryRealTimeSingleTaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRealTimeSingleTaskResp)
	err := c.cc.Invoke(ctx, Task_QueryRealTimeSingleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility.
type TaskServer interface {
	// 定时循环任务
	AddCronCycleTask(context.Context, *AddCronCycleTaskReq) (*Response, error)
	DelCronCycleTask(context.Context, *DelCronCycleTaskReq) (*Response, error)
	ModCronCycleTask(context.Context, *ModCronCycleTaskReq) (*Response, error)
	StartOrStopCronCycleTask(context.Context, *StartOrStopCronCycleTaskReq) (*Response, error)
	QueryCronCycleTask(context.Context, *QueryCronCycleTaskReq) (*QueryCronCycleTaskResp, error)
	// 固定时间单任务
	AddFixedTimeSingleTask(context.Context, *AddFixedTimeSingleTaskReq) (*Response, error)
	DelFixedTimeSingleTask(context.Context, *DelFixedTimeSingleTaskReq) (*Response, error)
	QueryFixedTimeSingleTask(context.Context, *QueryFixedTimeSingleTaskReq) (*QueryFixedTimeSingleTaskResp, error)
	// 实时单任务
	AddRealTimeSingleTask(context.Context, *AddRealTimeSingleTaskReq) (*Response, error)
	QueryRealTimeSingleTask(context.Context, *QueryRealTimeSingleTaskReq) (*QueryRealTimeSingleTaskResp, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServer struct{}

func (UnimplementedTaskServer) AddCronCycleTask(context.Context, *AddCronCycleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCronCycleTask not implemented")
}
func (UnimplementedTaskServer) DelCronCycleTask(context.Context, *DelCronCycleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCronCycleTask not implemented")
}
func (UnimplementedTaskServer) ModCronCycleTask(context.Context, *ModCronCycleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModCronCycleTask not implemented")
}
func (UnimplementedTaskServer) StartOrStopCronCycleTask(context.Context, *StartOrStopCronCycleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOrStopCronCycleTask not implemented")
}
func (UnimplementedTaskServer) QueryCronCycleTask(context.Context, *QueryCronCycleTaskReq) (*QueryCronCycleTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCronCycleTask not implemented")
}
func (UnimplementedTaskServer) AddFixedTimeSingleTask(context.Context, *AddFixedTimeSingleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFixedTimeSingleTask not implemented")
}
func (UnimplementedTaskServer) DelFixedTimeSingleTask(context.Context, *DelFixedTimeSingleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFixedTimeSingleTask not implemented")
}
func (UnimplementedTaskServer) QueryFixedTimeSingleTask(context.Context, *QueryFixedTimeSingleTaskReq) (*QueryFixedTimeSingleTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFixedTimeSingleTask not implemented")
}
func (UnimplementedTaskServer) AddRealTimeSingleTask(context.Context, *AddRealTimeSingleTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRealTimeSingleTask not implemented")
}
func (UnimplementedTaskServer) QueryRealTimeSingleTask(context.Context, *QueryRealTimeSingleTaskReq) (*QueryRealTimeSingleTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRealTimeSingleTask not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}
func (UnimplementedTaskServer) testEmbeddedByValue()              {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	// If the following call pancis, it indicates UnimplementedTaskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_AddCronCycleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCronCycleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddCronCycleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_AddCronCycleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddCronCycleTask(ctx, req.(*AddCronCycleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DelCronCycleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCronCycleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DelCronCycleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DelCronCycleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DelCronCycleTask(ctx, req.(*DelCronCycleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ModCronCycleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModCronCycleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ModCronCycleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ModCronCycleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ModCronCycleTask(ctx, req.(*ModCronCycleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_StartOrStopCronCycleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOrStopCronCycleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).StartOrStopCronCycleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_StartOrStopCronCycleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).StartOrStopCronCycleTask(ctx, req.(*StartOrStopCronCycleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryCronCycleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCronCycleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryCronCycleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryCronCycleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryCronCycleTask(ctx, req.(*QueryCronCycleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AddFixedTimeSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFixedTimeSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddFixedTimeSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_AddFixedTimeSingleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddFixedTimeSingleTask(ctx, req.(*AddFixedTimeSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DelFixedTimeSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFixedTimeSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DelFixedTimeSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DelFixedTimeSingleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DelFixedTimeSingleTask(ctx, req.(*DelFixedTimeSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryFixedTimeSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFixedTimeSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryFixedTimeSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryFixedTimeSingleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryFixedTimeSingleTask(ctx, req.(*QueryFixedTimeSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AddRealTimeSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRealTimeSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddRealTimeSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_AddRealTimeSingleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddRealTimeSingleTask(ctx, req.(*AddRealTimeSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_QueryRealTimeSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRealTimeSingleTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).QueryRealTimeSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_QueryRealTimeSingleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).QueryRealTimeSingleTask(ctx, req.(*QueryRealTimeSingleTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCronCycleTask",
			Handler:    _Task_AddCronCycleTask_Handler,
		},
		{
			MethodName: "DelCronCycleTask",
			Handler:    _Task_DelCronCycleTask_Handler,
		},
		{
			MethodName: "ModCronCycleTask",
			Handler:    _Task_ModCronCycleTask_Handler,
		},
		{
			MethodName: "StartOrStopCronCycleTask",
			Handler:    _Task_StartOrStopCronCycleTask_Handler,
		},
		{
			MethodName: "QueryCronCycleTask",
			Handler:    _Task_QueryCronCycleTask_Handler,
		},
		{
			MethodName: "AddFixedTimeSingleTask",
			Handler:    _Task_AddFixedTimeSingleTask_Handler,
		},
		{
			MethodName: "DelFixedTimeSingleTask",
			Handler:    _Task_DelFixedTimeSingleTask_Handler,
		},
		{
			MethodName: "QueryFixedTimeSingleTask",
			Handler:    _Task_QueryFixedTimeSingleTask_Handler,
		},
		{
			MethodName: "AddRealTimeSingleTask",
			Handler:    _Task_AddRealTimeSingleTask_Handler,
		},
		{
			MethodName: "QueryRealTimeSingleTask",
			Handler:    _Task_QueryRealTimeSingleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
