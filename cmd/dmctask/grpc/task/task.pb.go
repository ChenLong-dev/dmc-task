// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: task.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Base struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Base) Reset() {
	*x = Base{}
	mi := &file_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *Base) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Base) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int64                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	UpdateTime    string                 `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateTime    string                 `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	mi := &file_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *BaseData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseData) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BaseData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *BaseData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *Base                  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

type FilterBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BizCode       string                 `protobuf:"bytes,2,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	BizId         string                 `protobuf:"bytes,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	CronTaskId    string                 `protobuf:"bytes,4,opt,name=cron_task_id,json=cronTaskId,proto3" json:"cron_task_id,omitempty"`
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	TimeType      string                 `protobuf:"bytes,6,opt,name=time_type,json=timeType,proto3" json:"time_type,omitempty"`
	Start         string                 `protobuf:"bytes,7,opt,name=start,proto3" json:"start,omitempty"`
	End           string                 `protobuf:"bytes,8,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterBase) Reset() {
	*x = FilterBase{}
	mi := &file_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBase) ProtoMessage() {}

func (x *FilterBase) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBase.ProtoReflect.Descriptor instead.
func (*FilterBase) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *FilterBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilterBase) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *FilterBase) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *FilterBase) GetCronTaskId() string {
	if x != nil {
		return x.CronTaskId
	}
	return ""
}

func (x *FilterBase) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FilterBase) GetTimeType() string {
	if x != nil {
		return x.TimeType
	}
	return ""
}

func (x *FilterBase) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *FilterBase) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type PageBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Page          int64                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int64                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageBase) Reset() {
	*x = PageBase{}
	mi := &file_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageBase) ProtoMessage() {}

func (x *PageBase) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageBase.ProtoReflect.Descriptor instead.
func (*PageBase) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *PageBase) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageBase) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageBase) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// ================================================
// 定时循环任务属性
type CronCycleTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int64                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	BizCode       string                 `protobuf:"bytes,2,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	Cron          string                 `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	ExecPath      string                 `protobuf:"bytes,4,opt,name=exec_path,json=execPath,proto3" json:"exec_path,omitempty"`
	Param         string                 `protobuf:"bytes,5,opt,name=param,proto3" json:"param,omitempty"`
	Timeout       int32                  `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ExtInfo       string                 `protobuf:"bytes,7,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronCycleTask) Reset() {
	*x = CronCycleTask{}
	mi := &file_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronCycleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCycleTask) ProtoMessage() {}

func (x *CronCycleTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCycleTask.ProtoReflect.Descriptor instead.
func (*CronCycleTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *CronCycleTask) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CronCycleTask) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *CronCycleTask) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CronCycleTask) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *CronCycleTask) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *CronCycleTask) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CronCycleTask) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

// 增加：创建定时循环任务请求
type AddCronCycleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *CronCycleTask         `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCronCycleTaskReq) Reset() {
	*x = AddCronCycleTaskReq{}
	mi := &file_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCronCycleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCronCycleTaskReq) ProtoMessage() {}

func (x *AddCronCycleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCronCycleTaskReq.ProtoReflect.Descriptor instead.
func (*AddCronCycleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *AddCronCycleTaskReq) GetTask() *CronCycleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// 删除：删除定时循环任务请求
type DelCronCycleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelCronCycleTaskReq) Reset() {
	*x = DelCronCycleTaskReq{}
	mi := &file_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelCronCycleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCronCycleTaskReq) ProtoMessage() {}

func (x *DelCronCycleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCronCycleTaskReq.ProtoReflect.Descriptor instead.
func (*DelCronCycleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *DelCronCycleTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 修改：修改定时循环任务请求
type ModCronCycleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Task          *CronCycleTask         `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModCronCycleTaskReq) Reset() {
	*x = ModCronCycleTaskReq{}
	mi := &file_task_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModCronCycleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModCronCycleTaskReq) ProtoMessage() {}

func (x *ModCronCycleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModCronCycleTaskReq.ProtoReflect.Descriptor instead.
func (*ModCronCycleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *ModCronCycleTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModCronCycleTaskReq) GetTask() *CronCycleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// 启停：修改定时循环任务启停状态请求
type StartOrStopCronCycleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsStart       bool                   `protobuf:"varint,2,opt,name=is_start,json=isStart,proto3" json:"is_start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartOrStopCronCycleTaskReq) Reset() {
	*x = StartOrStopCronCycleTaskReq{}
	mi := &file_task_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartOrStopCronCycleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOrStopCronCycleTaskReq) ProtoMessage() {}

func (x *StartOrStopCronCycleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOrStopCronCycleTaskReq.ProtoReflect.Descriptor instead.
func (*StartOrStopCronCycleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *StartOrStopCronCycleTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartOrStopCronCycleTaskReq) GetIsStart() bool {
	if x != nil {
		return x.IsStart
	}
	return false
}

// 查询：查询定时循环任务请求
type QueryCronCycleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FilterBase            `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page          *PageBase              `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCronCycleTaskReq) Reset() {
	*x = QueryCronCycleTaskReq{}
	mi := &file_task_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCronCycleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCronCycleTaskReq) ProtoMessage() {}

func (x *QueryCronCycleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCronCycleTaskReq.ProtoReflect.Descriptor instead.
func (*QueryCronCycleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *QueryCronCycleTaskReq) GetFilter() *FilterBase {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryCronCycleTaskReq) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

type CronCycleTaskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseData              `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Task          *CronCycleTask         `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronCycleTaskData) Reset() {
	*x = CronCycleTaskData{}
	mi := &file_task_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronCycleTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronCycleTaskData) ProtoMessage() {}

func (x *CronCycleTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronCycleTaskData.ProtoReflect.Descriptor instead.
func (*CronCycleTaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *CronCycleTaskData) GetBase() *BaseData {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CronCycleTaskData) GetTask() *CronCycleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type QueryCronCycleTaskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *Base                  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          []*CronCycleTaskData   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Page          *PageBase              `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCronCycleTaskResp) Reset() {
	*x = QueryCronCycleTaskResp{}
	mi := &file_task_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCronCycleTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCronCycleTaskResp) ProtoMessage() {}

func (x *QueryCronCycleTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCronCycleTaskResp.ProtoReflect.Descriptor instead.
func (*QueryCronCycleTaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *QueryCronCycleTaskResp) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryCronCycleTaskResp) GetData() []*CronCycleTaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryCronCycleTaskResp) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

// ================================================
// 固定时间单任务属性
type FixedTimeSingleTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int64                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	BizCode       string                 `protobuf:"bytes,2,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	BizId         string                 `protobuf:"bytes,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	ExecPath      string                 `protobuf:"bytes,4,opt,name=exec_path,json=execPath,proto3" json:"exec_path,omitempty"`
	ExecTime      int64                  `protobuf:"varint,5,opt,name=exec_time,json=execTime,proto3" json:"exec_time,omitempty"`
	Param         string                 `protobuf:"bytes,6,opt,name=param,proto3" json:"param,omitempty"`
	Timeout       int32                  `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ExtInfo       string                 `protobuf:"bytes,8,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeSingleTask) Reset() {
	*x = FixedTimeSingleTask{}
	mi := &file_task_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeSingleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeSingleTask) ProtoMessage() {}

func (x *FixedTimeSingleTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeSingleTask.ProtoReflect.Descriptor instead.
func (*FixedTimeSingleTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *FixedTimeSingleTask) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FixedTimeSingleTask) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *FixedTimeSingleTask) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *FixedTimeSingleTask) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *FixedTimeSingleTask) GetExecTime() int64 {
	if x != nil {
		return x.ExecTime
	}
	return 0
}

func (x *FixedTimeSingleTask) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *FixedTimeSingleTask) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *FixedTimeSingleTask) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

// 增加：增加定时任务请求
type AddFixedTimeSingleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *FixedTimeSingleTask   `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddFixedTimeSingleTaskReq) Reset() {
	*x = AddFixedTimeSingleTaskReq{}
	mi := &file_task_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFixedTimeSingleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFixedTimeSingleTaskReq) ProtoMessage() {}

func (x *AddFixedTimeSingleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFixedTimeSingleTaskReq.ProtoReflect.Descriptor instead.
func (*AddFixedTimeSingleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *AddFixedTimeSingleTaskReq) GetTask() *FixedTimeSingleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

// 删除：删除定时任务请求
type DelFixedTimeSingleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelFixedTimeSingleTaskReq) Reset() {
	*x = DelFixedTimeSingleTaskReq{}
	mi := &file_task_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelFixedTimeSingleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelFixedTimeSingleTaskReq) ProtoMessage() {}

func (x *DelFixedTimeSingleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelFixedTimeSingleTaskReq.ProtoReflect.Descriptor instead.
func (*DelFixedTimeSingleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *DelFixedTimeSingleTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 查询：查询定时任务请求
type QueryFixedTimeSingleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FilterBase            `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page          *PageBase              `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFixedTimeSingleTaskReq) Reset() {
	*x = QueryFixedTimeSingleTaskReq{}
	mi := &file_task_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFixedTimeSingleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFixedTimeSingleTaskReq) ProtoMessage() {}

func (x *QueryFixedTimeSingleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFixedTimeSingleTaskReq.ProtoReflect.Descriptor instead.
func (*QueryFixedTimeSingleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *QueryFixedTimeSingleTaskReq) GetFilter() *FilterBase {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryFixedTimeSingleTaskReq) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

// 查询：查询定时任务应答
type FixedTimeSingleTaskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseData              `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Task          *FixedTimeSingleTask   `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	StartTime     string                 `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime    string                 `protobuf:"bytes,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Interval      int64                  `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	ResultMsg     string                 `protobuf:"bytes,6,opt,name=result_msg,json=resultMsg,proto3" json:"result_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedTimeSingleTaskData) Reset() {
	*x = FixedTimeSingleTaskData{}
	mi := &file_task_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimeSingleTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimeSingleTaskData) ProtoMessage() {}

func (x *FixedTimeSingleTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimeSingleTaskData.ProtoReflect.Descriptor instead.
func (*FixedTimeSingleTaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *FixedTimeSingleTaskData) GetBase() *BaseData {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FixedTimeSingleTaskData) GetTask() *FixedTimeSingleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *FixedTimeSingleTaskData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *FixedTimeSingleTaskData) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *FixedTimeSingleTaskData) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *FixedTimeSingleTaskData) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

type QueryFixedTimeSingleTaskResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Base          *Base                      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          []*FixedTimeSingleTaskData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Page          *PageBase                  `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFixedTimeSingleTaskResp) Reset() {
	*x = QueryFixedTimeSingleTaskResp{}
	mi := &file_task_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFixedTimeSingleTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFixedTimeSingleTaskResp) ProtoMessage() {}

func (x *QueryFixedTimeSingleTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFixedTimeSingleTaskResp.ProtoReflect.Descriptor instead.
func (*QueryFixedTimeSingleTaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *QueryFixedTimeSingleTaskResp) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryFixedTimeSingleTaskResp) GetData() []*FixedTimeSingleTaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryFixedTimeSingleTaskResp) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

// ================================================
// 实时单任务属性
type RealTimeSingleTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int64                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	BizCode       string                 `protobuf:"bytes,2,opt,name=biz_code,json=bizCode,proto3" json:"biz_code,omitempty"`
	BizId         string                 `protobuf:"bytes,3,opt,name=biz_id,json=bizId,proto3" json:"biz_id,omitempty"`
	ExecPath      string                 `protobuf:"bytes,4,opt,name=exec_path,json=execPath,proto3" json:"exec_path,omitempty"`
	Param         string                 `protobuf:"bytes,5,opt,name=param,proto3" json:"param,omitempty"`
	Timeout       int32                  `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ExtInfo       string                 `protobuf:"bytes,7,opt,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeSingleTask) Reset() {
	*x = RealTimeSingleTask{}
	mi := &file_task_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeSingleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeSingleTask) ProtoMessage() {}

func (x *RealTimeSingleTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeSingleTask.ProtoReflect.Descriptor instead.
func (*RealTimeSingleTask) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *RealTimeSingleTask) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RealTimeSingleTask) GetBizCode() string {
	if x != nil {
		return x.BizCode
	}
	return ""
}

func (x *RealTimeSingleTask) GetBizId() string {
	if x != nil {
		return x.BizId
	}
	return ""
}

func (x *RealTimeSingleTask) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *RealTimeSingleTask) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *RealTimeSingleTask) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RealTimeSingleTask) GetExtInfo() string {
	if x != nil {
		return x.ExtInfo
	}
	return ""
}

type AddRealTimeSingleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *RealTimeSingleTask    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRealTimeSingleTaskReq) Reset() {
	*x = AddRealTimeSingleTaskReq{}
	mi := &file_task_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRealTimeSingleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRealTimeSingleTaskReq) ProtoMessage() {}

func (x *AddRealTimeSingleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRealTimeSingleTaskReq.ProtoReflect.Descriptor instead.
func (*AddRealTimeSingleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *AddRealTimeSingleTaskReq) GetTask() *RealTimeSingleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type QueryRealTimeSingleTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *FilterBase            `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Page          *PageBase              `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRealTimeSingleTaskReq) Reset() {
	*x = QueryRealTimeSingleTaskReq{}
	mi := &file_task_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRealTimeSingleTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRealTimeSingleTaskReq) ProtoMessage() {}

func (x *QueryRealTimeSingleTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRealTimeSingleTaskReq.ProtoReflect.Descriptor instead.
func (*QueryRealTimeSingleTaskReq) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *QueryRealTimeSingleTaskReq) GetFilter() *FilterBase {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryRealTimeSingleTaskReq) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

type RealTimeSingleTaskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseData              `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Task          *RealTimeSingleTask    `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	StartTime     string                 `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime    string                 `protobuf:"bytes,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Interval      int64                  `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`
	ResultMsg     string                 `protobuf:"bytes,6,opt,name=result_msg,json=resultMsg,proto3" json:"result_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RealTimeSingleTaskData) Reset() {
	*x = RealTimeSingleTaskData{}
	mi := &file_task_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeSingleTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeSingleTaskData) ProtoMessage() {}

func (x *RealTimeSingleTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeSingleTaskData.ProtoReflect.Descriptor instead.
func (*RealTimeSingleTaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *RealTimeSingleTaskData) GetBase() *BaseData {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *RealTimeSingleTaskData) GetTask() *RealTimeSingleTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *RealTimeSingleTaskData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RealTimeSingleTaskData) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *RealTimeSingleTaskData) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *RealTimeSingleTaskData) GetResultMsg() string {
	if x != nil {
		return x.ResultMsg
	}
	return ""
}

type QueryRealTimeSingleTaskResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Base          *Base                     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Data          []*RealTimeSingleTaskData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Page          *PageBase                 `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRealTimeSingleTaskResp) Reset() {
	*x = QueryRealTimeSingleTaskResp{}
	mi := &file_task_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRealTimeSingleTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRealTimeSingleTaskResp) ProtoMessage() {}

func (x *QueryRealTimeSingleTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRealTimeSingleTaskResp.ProtoReflect.Descriptor instead.
func (*QueryRealTimeSingleTaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *QueryRealTimeSingleTaskResp) GetBase() *Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QueryRealTimeSingleTaskResp) GetData() []*RealTimeSingleTaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryRealTimeSingleTaskResp) GetPage() *PageBase {
	if x != nil {
		return x.Page
	}
	return nil
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x04,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x74, 0x0a, 0x08, 0x42, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x25, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x51, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x43,
	0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x72, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x72,
	0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x6f, 0x64,
	0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x5b,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x43,
	0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x22, 0x7a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x6e,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0xe0, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x45, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x69, 0x7a, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x60, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x84, 0x01, 0x0a,
	0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x32, 0xa1, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x14, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x6e, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x43, 0x72, 0x6f,
	0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x4d, 0x6f, 0x64,
	0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x18, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f,
	0x72, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72,
	0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x72, 0x6f, 0x6e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x44, 0x65, 0x6c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3d, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData []byte
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)))
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_task_proto_goTypes = []any{
	(*Base)(nil),                         // 0: Base
	(*BaseData)(nil),                     // 1: BaseData
	(*Response)(nil),                     // 2: Response
	(*FilterBase)(nil),                   // 3: FilterBase
	(*PageBase)(nil),                     // 4: PageBase
	(*CronCycleTask)(nil),                // 5: CronCycleTask
	(*AddCronCycleTaskReq)(nil),          // 6: AddCronCycleTaskReq
	(*DelCronCycleTaskReq)(nil),          // 7: DelCronCycleTaskReq
	(*ModCronCycleTaskReq)(nil),          // 8: ModCronCycleTaskReq
	(*StartOrStopCronCycleTaskReq)(nil),  // 9: StartOrStopCronCycleTaskReq
	(*QueryCronCycleTaskReq)(nil),        // 10: QueryCronCycleTaskReq
	(*CronCycleTaskData)(nil),            // 11: CronCycleTaskData
	(*QueryCronCycleTaskResp)(nil),       // 12: QueryCronCycleTaskResp
	(*FixedTimeSingleTask)(nil),          // 13: FixedTimeSingleTask
	(*AddFixedTimeSingleTaskReq)(nil),    // 14: AddFixedTimeSingleTaskReq
	(*DelFixedTimeSingleTaskReq)(nil),    // 15: DelFixedTimeSingleTaskReq
	(*QueryFixedTimeSingleTaskReq)(nil),  // 16: QueryFixedTimeSingleTaskReq
	(*FixedTimeSingleTaskData)(nil),      // 17: FixedTimeSingleTaskData
	(*QueryFixedTimeSingleTaskResp)(nil), // 18: QueryFixedTimeSingleTaskResp
	(*RealTimeSingleTask)(nil),           // 19: RealTimeSingleTask
	(*AddRealTimeSingleTaskReq)(nil),     // 20: AddRealTimeSingleTaskReq
	(*QueryRealTimeSingleTaskReq)(nil),   // 21: QueryRealTimeSingleTaskReq
	(*RealTimeSingleTaskData)(nil),       // 22: RealTimeSingleTaskData
	(*QueryRealTimeSingleTaskResp)(nil),  // 23: QueryRealTimeSingleTaskResp
}
var file_task_proto_depIdxs = []int32{
	0,  // 0: Response.base:type_name -> Base
	5,  // 1: AddCronCycleTaskReq.task:type_name -> CronCycleTask
	5,  // 2: ModCronCycleTaskReq.task:type_name -> CronCycleTask
	3,  // 3: QueryCronCycleTaskReq.filter:type_name -> FilterBase
	4,  // 4: QueryCronCycleTaskReq.page:type_name -> PageBase
	1,  // 5: CronCycleTaskData.base:type_name -> BaseData
	5,  // 6: CronCycleTaskData.task:type_name -> CronCycleTask
	0,  // 7: QueryCronCycleTaskResp.base:type_name -> Base
	11, // 8: QueryCronCycleTaskResp.data:type_name -> CronCycleTaskData
	4,  // 9: QueryCronCycleTaskResp.page:type_name -> PageBase
	13, // 10: AddFixedTimeSingleTaskReq.task:type_name -> FixedTimeSingleTask
	3,  // 11: QueryFixedTimeSingleTaskReq.filter:type_name -> FilterBase
	4,  // 12: QueryFixedTimeSingleTaskReq.page:type_name -> PageBase
	1,  // 13: FixedTimeSingleTaskData.base:type_name -> BaseData
	13, // 14: FixedTimeSingleTaskData.task:type_name -> FixedTimeSingleTask
	0,  // 15: QueryFixedTimeSingleTaskResp.base:type_name -> Base
	17, // 16: QueryFixedTimeSingleTaskResp.data:type_name -> FixedTimeSingleTaskData
	4,  // 17: QueryFixedTimeSingleTaskResp.page:type_name -> PageBase
	19, // 18: AddRealTimeSingleTaskReq.task:type_name -> RealTimeSingleTask
	3,  // 19: QueryRealTimeSingleTaskReq.filter:type_name -> FilterBase
	4,  // 20: QueryRealTimeSingleTaskReq.page:type_name -> PageBase
	1,  // 21: RealTimeSingleTaskData.base:type_name -> BaseData
	19, // 22: RealTimeSingleTaskData.task:type_name -> RealTimeSingleTask
	0,  // 23: QueryRealTimeSingleTaskResp.base:type_name -> Base
	22, // 24: QueryRealTimeSingleTaskResp.data:type_name -> RealTimeSingleTaskData
	4,  // 25: QueryRealTimeSingleTaskResp.page:type_name -> PageBase
	6,  // 26: Task.AddCronCycleTask:input_type -> AddCronCycleTaskReq
	7,  // 27: Task.DelCronCycleTask:input_type -> DelCronCycleTaskReq
	8,  // 28: Task.ModCronCycleTask:input_type -> ModCronCycleTaskReq
	9,  // 29: Task.StartOrStopCronCycleTask:input_type -> StartOrStopCronCycleTaskReq
	10, // 30: Task.QueryCronCycleTask:input_type -> QueryCronCycleTaskReq
	14, // 31: Task.AddFixedTimeSingleTask:input_type -> AddFixedTimeSingleTaskReq
	15, // 32: Task.DelFixedTimeSingleTask:input_type -> DelFixedTimeSingleTaskReq
	16, // 33: Task.QueryFixedTimeSingleTask:input_type -> QueryFixedTimeSingleTaskReq
	20, // 34: Task.AddRealTimeSingleTask:input_type -> AddRealTimeSingleTaskReq
	21, // 35: Task.QueryRealTimeSingleTask:input_type -> QueryRealTimeSingleTaskReq
	2,  // 36: Task.AddCronCycleTask:output_type -> Response
	2,  // 37: Task.DelCronCycleTask:output_type -> Response
	2,  // 38: Task.ModCronCycleTask:output_type -> Response
	2,  // 39: Task.StartOrStopCronCycleTask:output_type -> Response
	12, // 40: Task.QueryCronCycleTask:output_type -> QueryCronCycleTaskResp
	2,  // 41: Task.AddFixedTimeSingleTask:output_type -> Response
	2,  // 42: Task.DelFixedTimeSingleTask:output_type -> Response
	18, // 43: Task.QueryFixedTimeSingleTask:output_type -> QueryFixedTimeSingleTaskResp
	2,  // 44: Task.AddRealTimeSingleTask:output_type -> Response
	23, // 45: Task.QueryRealTimeSingleTask:output_type -> QueryRealTimeSingleTaskResp
	36, // [36:46] is the sub-list for method output_type
	26, // [26:36] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_task_proto_rawDesc), len(file_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
